@page "/"
@rendermode InteractiveServer
@using RecipeApp.Model
@inject RecipesDbContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h1>Рецепты</h1>

<input type="text"
       class="form-control mb-3"
       placeholder="Поиск рецептов..."
       @bind="SearchText"
       @bind:event="oninput" />


<button class="btn btn-primary mb-3" @onclick="AddRecipe">➕</button>

@if (recipes == null)
{
    <p>Загрузка...</p>
}
else if (!recipes.Any())
{
    <p>Рецептов пока нет.</p>
}
else
{
    <ul class="list-group">
        @foreach (var recipe in PagedRecipes)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span @onclick="() => ViewRecipe(recipe.Id)" style="cursor: pointer;">@recipe.Title</span>
                <span>
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => EditRecipe(recipe.Id)">✏️</button>
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(recipe.Id)">🗑️</button>
                </span>
            </li>
        }
    </ul>
    @if (TotalPages > 1)
    {
        <nav>
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">«</button>
                </li>
                @for (int i = 1; i <= TotalPages; i++)
                {
                    var pageNumber = i; // Локальная переменная для замыкания
                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">»</button>
                </li>
            </ul>
        </nav>
    }

}

@code {
    private List<Recipe>? recipes;

    protected override async Task OnInitializedAsync()
    {
        recipes = await DbContext.Recipes.ToListAsync();
    }

    void AddRecipe()
    {
        NavigationManager.NavigateTo("/recipes/new");
    }

    void ViewRecipe(int id)
    {
        NavigationManager.NavigateTo($"/recipes/{id}");
    }

    void EditRecipe(int id)
    {
        NavigationManager.NavigateTo($"/recipes/edit/{id}");
    }

    async Task ConfirmDelete(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Удалить рецепт?");
        if (confirmed)
        {
            var recipe = await DbContext.Recipes.FindAsync(id);
            if (recipe is not null)
            {
                DbContext.Recipes.Remove(recipe);
                await DbContext.SaveChangesAsync();
                recipes = await DbContext.Recipes.ToListAsync();
                StateHasChanged();
            }
        }
    }

    private string _searchText = "";

    private string SearchText
    {
        get => _searchText;
        set
        {
            if (_searchText != value)
            {
                _searchText = value;
                currentPage = 1;
            }
        }
    }

    private IEnumerable<Recipe> FilteredRecipes
    {
        get
        {
            return string.IsNullOrWhiteSpace(_searchText)
                ? recipes!
                : recipes!.Where(r =>
                    r.Title.Contains(_searchText, StringComparison.OrdinalIgnoreCase));
        }
    }

    private int currentPage = 1;
    private const int pageSize = 10;

    private int TotalPages => (int)Math.Ceiling((double)(FilteredRecipes?.Count() ?? 0) / pageSize);

    private IEnumerable<Recipe> PagedRecipes =>
        FilteredRecipes?
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
        ?? [];

    void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
        }
    }
}