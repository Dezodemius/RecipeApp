@page "/recipes/new"
@using RecipeApp.Model
@inject RecipesDbContext DbContext
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Env

<h1>Новый рецепт</h1>

<div class="mb-3">
    <label class="form-label">Название</label>
    <input class="form-control" @bind="recipe.Title" />
</div>

<div class="mb-3">
    <label class="form-label">Рецепт</label>
    <InputFile OnChange="HandleFileSelected" />
    @if (!string.IsNullOrEmpty(imagePreviewUrl))
    {
        <img src="@imagePreviewUrl" style="max-width: 200px;" class="img-thumbnail mt-2" />
    }

    <div class="col-md-12">
        <MarkdownEditor
            @bind-Value="@markdownValue"
            ValueHTMLChanged="@OnMarkdownValueHTMLChanged" />
        <hr />
    </div>
</div>

<h5>Ингредиенты</h5>

@foreach (var ing in recipe.Ingredients)
{
    <div class="row g-2 mb-2">
        <div class="col">
            <input class="form-control" placeholder="Название" @bind="ing.Name" />
        </div>
        <div class="col">
            <input class="form-control" placeholder="Кол-во" type="number" @bind="ing.Amount" />
        </div>
        <div class="col">
            <select class="form-select" @bind="ing.Unit">
                <option value="грамм">грамм</option>
                <option value="штука">штук</option>
            </select>
        </div>
        <div class="col">
            <input class="form-control" placeholder="Ккал" type="number" @bind="ing.Calories" />
        </div>
        <div class="col">
            <input class="form-control" placeholder="Белки" type="number" @bind="ing.Protein" />
        </div>
        <div class="col">
            <input class="form-control" placeholder="Жиры" type="number" @bind="ing.Fat" />
        </div>
        <div class="col">
            <input class="form-control" placeholder="Углеводы" type="number" @bind="ing.Carbs" />
        </div>
        <div class="col-auto">
            <button class="btn btn-outline-danger" @onclick="() => RemoveIngredient(ing)">✕</button>
        </div>
    </div>
}

<button class="btn btn-secondary mb-3" @onclick="AddIngredient">+ Добавить ингредиент</button>

<div class="mt-4">
    <button class="btn btn-primary" @onclick="Save">Сохранить</button>
    <button class="btn btn-secondary ms-2" @onclick="Cancel">Отмена</button>
</div>

@code {
    private string markdownValue;
    private string markdownHtml;

    private Recipe recipe = new()
    {
        Ingredients = new List<Ingredient>()
    };

    void AddIngredient()
    {
        recipe.Ingredients.Add(new Ingredient());
    }

    void RemoveIngredient(Ingredient ing)
    {
        recipe.Ingredients.Remove(ing);
    }

    async Task Save()
    {
        recipe.Content = markdownValue;
        DbContext.Recipes.Add(recipe);
        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        return Task.CompletedTask;
    }

    IBrowserFile? selectedFile;
    string? imagePreviewUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
        var savePath = Path.Combine(Env.WebRootPath, "uploads", fileName);

        await using var stream = File.Create(savePath);
        await selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream);

        recipe.ImagePath = $"uploads/{fileName}";

        imagePreviewUrl = recipe.ImagePath;
    }
}