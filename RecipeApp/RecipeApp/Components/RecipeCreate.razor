@page "/recipes/new"
@using RecipeApp.Model
@inject RecipesDbContext DbContext
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Env

<main class="recipe-view">
    <div class="recipe-card">
        <input
            class="form-control recipe-title-input mb-4"
            placeholder="Введите название рецепта"
            @bind="recipe.Title" />

        <div class="image-upload-wrapper mb-4">
            <label for="imageInput" class="image-upload-label">
                @if (!string.IsNullOrEmpty(imagePreviewUrl))
                {
                    <img src="@imagePreviewUrl" class="recipe-image-preview" />
                }
                else
                {
                    <div class="image-placeholder">
                        <span class="upload-text">
                            <img src="icons/add_image.png" alt="Удалить" width="40" class="me-1"/>
                        </span>
                    </div>
                }
            </label>
            <InputFile id="imageInput" class="d-none" OnChange="HandleFileSelected" />
        </div>

        <div class="mb-3">
            <h3 >Рецепт</h3>
            <MarkdownEditor
                @bind-Value="@markdownValue"
                ValueHTMLChanged="@OnMarkdownValueHTMLChanged" />
        </div>

        <h5>Ингредиенты</h5>

        <div class="table-responsive">
            <table class="table table-bordered ingredient-table">
                <thead>
                <tr>
                    <th style="width: 60%">Название</th>
                    <th>Кол-во</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var ing in recipe.Ingredients)
                {
                    <tr>
                        <td><input class="form-control" @bind="ing.Name" /></td>
                        <td>
                            <div class="quantity-unit">
                                <input class="form-control form-control-sm" type="number" @bind="ing.Amount" style="max-width: 100px;" />
                                <select class="form-select form-select-sm" @bind="ing.Unit" style="max-width: 100px;">
                                    @foreach (var unit in unitTypes)
                                    {
                                        <option value="@unit">@GetUnitLabel(unit)</option>
                                    }
                                </select>
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveIngredient(ing)">✕</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <button class="btn btn-secondary mb-3" @onclick="AddIngredient">+ Добавить ингредиент</button>


        <div class="mt-4">
            <button class="btn btn-primary" @onclick="Save">Сохранить</button>
            <button class="btn btn-secondary ms-2" @onclick="Cancel">Отмена</button>
        </div>
    </div>
</main>

@code {
    private string markdownValue;
    private string markdownHtml;
    private List<UnitType> unitTypes = Enum.GetValues(typeof(UnitType)).Cast<UnitType>().ToList();

    private string GetUnitLabel(UnitType unit)
    {
        return unit switch
        {
            UnitType.Gram => "г",
            UnitType.Piece => "шт",
            UnitType.Tablespoon => "ст. ложка",
            UnitType.Milliliter => "мл",
            UnitType.Liter => "л",
            _ => unit.ToString()
        };
    }


    private Recipe recipe = new()
    {
        Ingredients = new List<Ingredient>()
    };

    void AddIngredient()
    {
        recipe.Ingredients.Add(new Ingredient());
    }

    void RemoveIngredient(Ingredient ing)
    {
        recipe.Ingredients.Remove(ing);
    }

    async Task Save()
    {
        recipe.Content = markdownValue;
        DbContext.Recipes.Add(recipe);
        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        return Task.CompletedTask;
    }

    IBrowserFile? selectedFile;
    string? imagePreviewUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
        var savePath = Path.Combine(Env.WebRootPath, "uploads", fileName);

        await using var stream = File.Create(savePath);
        await selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream);

        recipe.ImagePath = $"uploads/{fileName}";

        imagePreviewUrl = recipe.ImagePath;
    }
}